openapi: "3.0.0"
info:
  version: 0.1.0
  title: Order Rest API
  description: Api to manage the orders reported to the system
  termsOfService: http://ares.ecommerce.com/terms
  contact:
    name: Ecommerce - Application
    email: ecommerce.contact@group.com
    url: http://ecommerce.shop.com/
servers:
  - url: /api/v1
tags:
  - name: orders
    description: Everything about Orders
paths:
  /orders:
    get:
      description: |
        Returns all orders from the system that the user has access to
      operationId: findOrders
      tags:
        - orders
      parameters:
        - name: pageNumber
          in: query
          description: current page to return
          required: false
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: orders paged response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOrders'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new orders. Duplicates are allowed
      operationId: addOrder
      tags:
        - orders
      requestBody:
        description: Order to add to the system
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrder'
      responses:
        '201':
          description: order response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/{id}:
    get:
      description: Returns a order based on id
      operationId: find order by id
      tags:
        - orders
      parameters:
        - name: id
          in: path
          description: ID of order to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: order response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single order based on the ID supplied
      operationId: deleteOrder
      tags:
        - orders
      parameters:
        - name: id
          in: path
          description: ID of order to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: order deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders/clients/{id}:
    get:
      description: Returns all orders based on client id
      operationId: find all orders by client id
      tags:
        - orders
      parameters:
        - name: id
          in: path
          description: ID of client to fetch orders
          required: true
          schema:
            type: integer
            format: int64
        - name: pageNumber
          in: query
          description: current page to return
          required: false
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: orders paged response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOrders'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    jwt:
      type: http
      description: JWT Authentication
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Order:
      allOf:
        - $ref: '#/components/schemas/CreateOrder'
        - required:
            - id
          properties:
            id:
              type: integer
              format: int64
    CreateOrder:
      required:
        - invoiceId
        - orderDate
        - totalCost
        - agency
        - method
        - provider
        - clientId
      properties:
        productId:
          type: integer
          format: int64
        invoiceId:
          type: integer
          format: int64
        orderDate:
          type: string
          format: date-time
        totalCost:
          type: number
          format: double
          minimum: 0
        totalCostWithoutVap:
          type: number
          format: double
          minimum: 0
        agency:
          type: string
          maxLength: 256
        method:
          type: string
          maxLength: 256
        provider:
          type: string
          maxLength: 256
        reportDate:
          type: string
          format: date-time
        clientId:
          type: integer
          format: int64
    PageOrders:
      required:
        - name
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

security:
  - jwt: []