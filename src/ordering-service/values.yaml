## Microservice image
## ref:
##
image:
  ## Microservice repository info
  ## ref:
  ##
  registry: registry.hub.docker.com
  repository: jsa4000/ecommerce-ordering-service
  tag: 0.0.1-SNAPSHOT
  ## Specify a imagePullPolicy
  ## 'Always' if imageTag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  imagePullPolicy: Always

env:
  ## All environment variables extra
  # SPRING_PROFILES_ACTIVE: docker

  SERVICES_CATALOG_ENDPOINT: http://catalog-service-micro:8080/api/v1
  #SERVER_SERVLET_CONTEXT-PATH: /ordering


## Microservice replicas for deployment
## ref:
##
replicas: 1

## Service configuration options
##
service:
  #type: ClusterIP
  type: NodePort
  externalPort: 8080
  nodePort: 31413
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: '8080'
    prometheus.io/path: /management/metrics

## Ingress configuration options
##
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/rule-type: PathPrefixStrip
    # kubernetes.io/tls-acme: "true"
  labels: {}
  path: /ordering
  hosts:
    - dev.api.com
  tls: []
  #  - secretName: microservice-cluster-tls
  #    hosts:
  #      - microservice.cluster.local

# Configure the probes for liveness and readiness
probes:
  ## liveness probe endpoint
  livenessPath: /management/health
  livenessPort: http
  ## readiness probe endpoint
  readinessPath: /management/health
  readinessPort: http

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources: {}
#  limits:
#    cpu: 1.0
#    memory: 2048Mi
#  requests:
#    cpu: 0.5
#    memory: 640Mi

## Datasource parameters, default 'postgresql' database
#
datasource:
  type: postgresql
  database: ordering
  ## Database Hostname
  ## if empty, the database points to the local database installed with the chart
  #
  host:
  port: 5432
  username: postgres
  password: password
  driverClassName: org.postgresql.Driver

## Postgres chart parameters
postgresql:

  ## Create Postresql deployment
  ##
  enabled: true

  ## Bitnami PostgreSQL image version
  ## ref: https://hub.docker.com/r/bitnami/postgresql/tags/
  ##
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 10.7.0
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: Always

  ## Bitnami PostgreSQL replication
  ## ref: https://hub.docker.com/r/bitnami/postgresql/tags/
  ##
  replication:
    enabled: false

  ## PostgreSQL admin user
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run
  postgresqlUsername: postgres

  ## PostgreSQL password
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run
  ##
  postgresqlPassword: password

  ## PostgreSQL data dir
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md
  ##
  postgresqlDataDir: /bitnami/postgresql

  ## PostgreSQL service configuration
  service:
    type: NodePort
    port: 5432
    nodePort: 31313

  ## PostgreSQL persistence configuration
  persistence:
    enabled: true
    mountPath: /bitnami/postgresql
    ## The subdirectory of the volume to mount to, useful in dev environments
    ## and one PV for multiple services.
    ##
    subPath: ""

    # storageClass: "-"
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}

