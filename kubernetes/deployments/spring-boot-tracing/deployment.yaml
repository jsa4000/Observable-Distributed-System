apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: simple-spring-boot-tracing
  annotations:
    "sidecar.jaegertracing.io/inject": "true"
  name: simple-spring-boot-tracing
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: simple-spring-boot-tracing
  template:
    metadata:
      labels:
        app: simple-spring-boot-tracing
    spec:
      containers:
      - image: jsa4000/spring-boot-tracing:0.0.1-SNAPSHOT
        name: simple-spring-boot-tracing
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          initialDelaySeconds: 45
          timeoutSeconds: 5
          periodSeconds: 10
          failureThreshold: 2
          httpGet:
            path: /management/health/liveness
            port: 8080
            scheme: HTTP
        readinessProbe:
          initialDelaySeconds: 45
          timeoutSeconds: 5
          periodSeconds: 10
          failureThreshold: 2
          httpGet:
            path: /management/health/readiness
            port: 8080
            scheme: HTTP
        # Test Graceful Shutdown
        lifecycle:
          preStop:
            exec:
              command: ["sh", "-c", "sleep 10"]
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: docker,jsonlog
        ## Configuration for OpenTracing using Jaeger
        - name: OPENTRACING_JAEGER_UDP_SENDER_HOST
          value: jaeger-all-in-one-agent.tracing.svc.cluster.local
        - name: OPENTRACING_JAEGER_UDP_SENDER_PORT
          value: '6831'
        - name: OPENTRACING_JAEGER_ENABLED
          ## Configure Agent as DaemonSet
          value: 'true'
          ## Configure Agent as sidecar (OpenTelemetry)
          #value: 'false' 
